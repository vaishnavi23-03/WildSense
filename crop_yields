{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6147658,"sourceType":"datasetVersion","datasetId":3525502}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-27T15:47:10.673339Z","iopub.execute_input":"2024-04-27T15:47:10.673717Z","iopub.status.idle":"2024-04-27T15:47:12.036136Z","shell.execute_reply.started":"2024-04-27T15:47:10.673687Z","shell.execute_reply":"2024-04-27T15:47:12.034885Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/crop-yield-in-indian-states-dataset/crop_yield.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/crop-yield-in-indian-states-dataset/crop_yield.csv')\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:47:16.782075Z","iopub.execute_input":"2024-04-27T15:47:16.782655Z","iopub.status.idle":"2024-04-27T15:47:16.908573Z","shell.execute_reply.started":"2024-04-27T15:47:16.782618Z","shell.execute_reply":"2024-04-27T15:47:16.907644Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"           Crop  Crop_Year       Season  State     Area  Production  \\\n0      Arecanut       1997  Whole Year   Assam  73814.0       56708   \n1     Arhar/Tur       1997  Kharif       Assam   6637.0        4685   \n2   Castor seed       1997  Kharif       Assam    796.0          22   \n3      Coconut        1997  Whole Year   Assam  19656.0   126905000   \n4  Cotton(lint)       1997  Kharif       Assam   1739.0         794   \n\n   Annual_Rainfall  Fertilizer  Pesticide        Yield  \n0           2051.4  7024878.38   22882.34     0.796087  \n1           2051.4   631643.29    2057.47     0.710435  \n2           2051.4    75755.32     246.76     0.238333  \n3           2051.4  1870661.52    6093.36  5238.051739  \n4           2051.4   165500.63     539.09     0.420909  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Crop</th>\n      <th>Crop_Year</th>\n      <th>Season</th>\n      <th>State</th>\n      <th>Area</th>\n      <th>Production</th>\n      <th>Annual_Rainfall</th>\n      <th>Fertilizer</th>\n      <th>Pesticide</th>\n      <th>Yield</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Arecanut</td>\n      <td>1997</td>\n      <td>Whole Year</td>\n      <td>Assam</td>\n      <td>73814.0</td>\n      <td>56708</td>\n      <td>2051.4</td>\n      <td>7024878.38</td>\n      <td>22882.34</td>\n      <td>0.796087</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Arhar/Tur</td>\n      <td>1997</td>\n      <td>Kharif</td>\n      <td>Assam</td>\n      <td>6637.0</td>\n      <td>4685</td>\n      <td>2051.4</td>\n      <td>631643.29</td>\n      <td>2057.47</td>\n      <td>0.710435</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Castor seed</td>\n      <td>1997</td>\n      <td>Kharif</td>\n      <td>Assam</td>\n      <td>796.0</td>\n      <td>22</td>\n      <td>2051.4</td>\n      <td>75755.32</td>\n      <td>246.76</td>\n      <td>0.238333</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Coconut</td>\n      <td>1997</td>\n      <td>Whole Year</td>\n      <td>Assam</td>\n      <td>19656.0</td>\n      <td>126905000</td>\n      <td>2051.4</td>\n      <td>1870661.52</td>\n      <td>6093.36</td>\n      <td>5238.051739</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Cotton(lint)</td>\n      <td>1997</td>\n      <td>Kharif</td>\n      <td>Assam</td>\n      <td>1739.0</td>\n      <td>794</td>\n      <td>2051.4</td>\n      <td>165500.63</td>\n      <td>539.09</td>\n      <td>0.420909</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:47:55.338973Z","iopub.execute_input":"2024-04-27T15:47:55.339483Z","iopub.status.idle":"2024-04-27T15:47:55.380896Z","shell.execute_reply.started":"2024-04-27T15:47:55.339440Z","shell.execute_reply":"2024-04-27T15:47:55.379746Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 19689 entries, 0 to 19688\nData columns (total 10 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   Crop             19689 non-null  object \n 1   Crop_Year        19689 non-null  int64  \n 2   Season           19689 non-null  object \n 3   State            19689 non-null  object \n 4   Area             19689 non-null  float64\n 5   Production       19689 non-null  int64  \n 6   Annual_Rainfall  19689 non-null  float64\n 7   Fertilizer       19689 non-null  float64\n 8   Pesticide        19689 non-null  float64\n 9   Yield            19689 non-null  float64\ndtypes: float64(5), int64(2), object(3)\nmemory usage: 1.5+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:48:10.362712Z","iopub.execute_input":"2024-04-27T15:48:10.363369Z","iopub.status.idle":"2024-04-27T15:48:10.371047Z","shell.execute_reply.started":"2024-04-27T15:48:10.363330Z","shell.execute_reply":"2024-04-27T15:48:10.369728Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"(19689, 10)"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:50:30.302845Z","iopub.execute_input":"2024-04-27T15:50:30.303358Z","iopub.status.idle":"2024-04-27T15:50:31.256816Z","shell.execute_reply.started":"2024-04-27T15:50:30.303315Z","shell.execute_reply":"2024-04-27T15:50:31.255335Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"X = df.drop('Yield', axis=1)\ny = df['Yield']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:50:41.376089Z","iopub.execute_input":"2024-04-27T15:50:41.376515Z","iopub.status.idle":"2024-04-27T15:50:41.402560Z","shell.execute_reply.started":"2024-04-27T15:50:41.376482Z","shell.execute_reply":"2024-04-27T15:50:41.401318Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"unique_crop = df['Crop'].nunique()\nunique_crop","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:51:36.997158Z","iopub.execute_input":"2024-04-27T15:51:36.997559Z","iopub.status.idle":"2024-04-27T15:51:37.007575Z","shell.execute_reply.started":"2024-04-27T15:51:36.997530Z","shell.execute_reply":"2024-04-27T15:51:37.006239Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"55"},"metadata":{}}]},{"cell_type":"code","source":"unique_season = df['Season'].nunique()\nunique_season","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:51:42.576048Z","iopub.execute_input":"2024-04-27T15:51:42.576410Z","iopub.status.idle":"2024-04-27T15:51:42.584240Z","shell.execute_reply.started":"2024-04-27T15:51:42.576382Z","shell.execute_reply":"2024-04-27T15:51:42.583243Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"6"},"metadata":{}}]},{"cell_type":"code","source":"unique_state = df['State'].nunique()\nunique_state","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:51:48.093102Z","iopub.execute_input":"2024-04-27T15:51:48.093517Z","iopub.status.idle":"2024-04-27T15:51:48.102795Z","shell.execute_reply.started":"2024-04-27T15:51:48.093484Z","shell.execute_reply":"2024-04-27T15:51:48.101329Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"30"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndf['Crop'] = label_encoder.fit_transform(df['Crop'])\ndf['Season'] = label_encoder.fit_transform(df['Season'])\ndf['State'] = label_encoder.fit_transform(df['State'])\n","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:52:33.660354Z","iopub.execute_input":"2024-04-27T15:52:33.660792Z","iopub.status.idle":"2024-04-27T15:52:33.688544Z","shell.execute_reply.started":"2024-04-27T15:52:33.660758Z","shell.execute_reply":"2024-04-27T15:52:33.687203Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:52:36.178618Z","iopub.execute_input":"2024-04-27T15:52:36.179023Z","iopub.status.idle":"2024-04-27T15:52:36.201406Z","shell.execute_reply.started":"2024-04-27T15:52:36.178973Z","shell.execute_reply":"2024-04-27T15:52:36.200210Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"       Crop  Crop_Year  Season  State      Area  Production  Annual_Rainfall  \\\n0         0       1997       4      2   73814.0       56708           2051.4   \n1         1       1997       1      2    6637.0        4685           2051.4   \n2         8       1997       1      2     796.0          22           2051.4   \n3         9       1997       4      2   19656.0   126905000           2051.4   \n4        11       1997       1      2    1739.0         794           2051.4   \n...     ...        ...     ...    ...       ...         ...              ...   \n19684    44       1998       1     19    4000.0        2000           1498.0   \n19685    53       1998       2     19    1000.0        3000           1498.0   \n19686    24       1997       1     10  310883.0      440900           1356.2   \n19687    40       1997       1     10  275746.0        5488           1356.2   \n19688    53       1997       2     10  239344.0      392160           1356.2   \n\n        Fertilizer  Pesticide        Yield  \n0       7024878.38   22882.34     0.796087  \n1        631643.29    2057.47     0.710435  \n2         75755.32     246.76     0.238333  \n3       1870661.52    6093.36  5238.051739  \n4        165500.63     539.09     0.420909  \n...            ...        ...          ...  \n19684    395200.00    1160.00     0.500000  \n19685     98800.00     290.00     3.000000  \n19686  29586735.11   96373.73     1.285000  \n19687  26242746.82   85481.26     0.016667  \n19688  22778368.48   74196.64     1.261818  \n\n[19689 rows x 10 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Crop</th>\n      <th>Crop_Year</th>\n      <th>Season</th>\n      <th>State</th>\n      <th>Area</th>\n      <th>Production</th>\n      <th>Annual_Rainfall</th>\n      <th>Fertilizer</th>\n      <th>Pesticide</th>\n      <th>Yield</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1997</td>\n      <td>4</td>\n      <td>2</td>\n      <td>73814.0</td>\n      <td>56708</td>\n      <td>2051.4</td>\n      <td>7024878.38</td>\n      <td>22882.34</td>\n      <td>0.796087</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1997</td>\n      <td>1</td>\n      <td>2</td>\n      <td>6637.0</td>\n      <td>4685</td>\n      <td>2051.4</td>\n      <td>631643.29</td>\n      <td>2057.47</td>\n      <td>0.710435</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8</td>\n      <td>1997</td>\n      <td>1</td>\n      <td>2</td>\n      <td>796.0</td>\n      <td>22</td>\n      <td>2051.4</td>\n      <td>75755.32</td>\n      <td>246.76</td>\n      <td>0.238333</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9</td>\n      <td>1997</td>\n      <td>4</td>\n      <td>2</td>\n      <td>19656.0</td>\n      <td>126905000</td>\n      <td>2051.4</td>\n      <td>1870661.52</td>\n      <td>6093.36</td>\n      <td>5238.051739</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11</td>\n      <td>1997</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1739.0</td>\n      <td>794</td>\n      <td>2051.4</td>\n      <td>165500.63</td>\n      <td>539.09</td>\n      <td>0.420909</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>19684</th>\n      <td>44</td>\n      <td>1998</td>\n      <td>1</td>\n      <td>19</td>\n      <td>4000.0</td>\n      <td>2000</td>\n      <td>1498.0</td>\n      <td>395200.00</td>\n      <td>1160.00</td>\n      <td>0.500000</td>\n    </tr>\n    <tr>\n      <th>19685</th>\n      <td>53</td>\n      <td>1998</td>\n      <td>2</td>\n      <td>19</td>\n      <td>1000.0</td>\n      <td>3000</td>\n      <td>1498.0</td>\n      <td>98800.00</td>\n      <td>290.00</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>19686</th>\n      <td>24</td>\n      <td>1997</td>\n      <td>1</td>\n      <td>10</td>\n      <td>310883.0</td>\n      <td>440900</td>\n      <td>1356.2</td>\n      <td>29586735.11</td>\n      <td>96373.73</td>\n      <td>1.285000</td>\n    </tr>\n    <tr>\n      <th>19687</th>\n      <td>40</td>\n      <td>1997</td>\n      <td>1</td>\n      <td>10</td>\n      <td>275746.0</td>\n      <td>5488</td>\n      <td>1356.2</td>\n      <td>26242746.82</td>\n      <td>85481.26</td>\n      <td>0.016667</td>\n    </tr>\n    <tr>\n      <th>19688</th>\n      <td>53</td>\n      <td>1997</td>\n      <td>2</td>\n      <td>10</td>\n      <td>239344.0</td>\n      <td>392160</td>\n      <td>1356.2</td>\n      <td>22778368.48</td>\n      <td>74196.64</td>\n      <td>1.261818</td>\n    </tr>\n  </tbody>\n</table>\n<p>19689 rows × 10 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X = df.drop('Yield', axis=1)\ny = df['Yield']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nmodel = RandomForestRegressor()","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:53:49.334872Z","iopub.execute_input":"2024-04-27T15:53:49.335309Z","iopub.status.idle":"2024-04-27T15:53:49.351109Z","shell.execute_reply.started":"2024-04-27T15:53:49.335274Z","shell.execute_reply":"2024-04-27T15:53:49.349659Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"param_grid = {\n    'n_estimators': [50, 100, 150],\n    'max_depth': [None, 10, 20],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4]\n}","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:53:59.858113Z","iopub.execute_input":"2024-04-27T15:53:59.858498Z","iopub.status.idle":"2024-04-27T15:53:59.863939Z","shell.execute_reply.started":"2024-04-27T15:53:59.858470Z","shell.execute_reply":"2024-04-27T15:53:59.863061Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"grid_search = GridSearchCV(model, param_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\ngrid_search.fit(X_train, y_train)\nprint(\"Best Parameters:\", grid_search.best_params_)","metadata":{"execution":{"iopub.status.busy":"2024-04-27T15:54:12.629933Z","iopub.execute_input":"2024-04-27T15:54:12.630409Z","iopub.status.idle":"2024-04-27T16:14:20.678478Z","shell.execute_reply.started":"2024-04-27T15:54:12.630374Z","shell.execute_reply":"2024-04-27T16:14:20.677048Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Best Parameters: {'max_depth': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 150}\n","output_type":"stream"}]},{"cell_type":"code","source":"rf_regressor = RandomForestRegressor(max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=150, random_state=42)\nrf_regressor.fit(X_train, y_train)\ny_pred = rf_regressor.predict(X_test)\nfrom sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\nprint(\"Mean Squared Error:\", mse)\nprint(\"R^2 Score:\", r2)","metadata":{"execution":{"iopub.status.busy":"2024-04-27T16:16:27.152906Z","iopub.execute_input":"2024-04-27T16:16:27.153370Z","iopub.status.idle":"2024-04-27T16:16:47.295063Z","shell.execute_reply.started":"2024-04-27T16:16:27.153329Z","shell.execute_reply":"2024-04-27T16:16:47.293633Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Mean Squared Error: 73878.7607950169\nR^2 Score: 0.9077944520353048\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}